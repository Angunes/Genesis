package com.mygdx.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Rectangle;

import java.util.Random;

public class MyGdxGame extends ApplicationAdapter {
	SpriteBatch batch;
	Texture img;
	Texture imgFundo;
	Mapa solo[] = new Mapa[103];
	Random bioma = new Random();
	Random tamanhoBioma = new Random();
	Champion firstc = new Champion();
	Rectangle champ;
	
	
	
	public void geraChamp(){
		firstc.imageBoneco = new Texture(Gdx.files.internal("obs1.png"));
		champ = new Rectangle();
		champ.x = 800/2-64/2;
		champ.y = 20;
		champ.height = 64;
		champ.width = 64;
		
	}
	
	//funções de controle de jogo
	public void geraMapa(){
		int comparador;
		int gerado = 0;
		int tam = 0;
		int ant = 0;
			do{
			tam += tamanhoBioma.nextInt(10) + 1;
			comparador = bioma.nextInt(4);
				if( comparador == 0){
					for(int i = ant; i <tam; i++){
						System.out.println(i + " é vermelho");
						solo[i].bioma = new Texture("biom1.png");
						solo[i].mudaEstado();
						solo[i].biom=0;
						ant = tam;
					}
				}
				if( comparador == 1){
					for(int i = ant; i <tam; i++){
						System.out.println(i + " é azul");
						solo[i].bioma = new Texture("biom2.png");
						solo[i].mudaEstado();
						solo[i].biom=1;
						ant = tam;
					}
				}
				if( comparador == 2){
					for(int i = ant; i <tam; i++){
						System.out.println(i + " é preto");
						solo[i].bioma = new Texture("biom3.png");
						solo[i].mudaEstado();
						solo[i].biom=2;
						ant = tam;
					}
				}
				if( comparador == 3){
					for(int i = ant; i <tam; i++){
						System.out.println(i + " é verde");
						solo[i].bioma = new Texture("biom4.png");
						solo[i].mudaEstado();
						solo[i].biom=3;
						ant = tam;
					}
				}
			}while(tam < 100);
	}

	//funções de desenhar na tela
	public void desenhaMapa(){
		int distanciaX = 0;
		int distanciaY = 0;
		for(int i = 0; i < 100; i++){
			if(solo[i].estado == true){
				batch.draw(solo[i].bioma,0 + distanciaX , 0);
			}
		distanciaX += 6;
		}
	}
	public void desenhaMontanha(int dist, Texture montanha){
		Random alturaMontanha = new Random();
		Random verificador = new Random();
		int distX = 0, distY = 0;
		int altura;
		if(verificador.nextInt(2) == 0){//ira gerar a montanha
			altura = alturaMontanha.nextInt(300);
				for(int i = 0; i < altura; i++){
					for(int j = 0; j < dist; j--){
						batch.draw(montanha, j + distX, i + distY);
					}
				}
		}
	}
	
/*___________________________________________________*/
	@Override
	public void create () {
		batch = new SpriteBatch();
		img = new Texture("badlogic.jpg");
		for(int i = 0; i < 103; i++){
			solo[i] = new Mapa(); 
		}
		geraMapa();
		geraChamp();
		imgFundo = new Texture("fundo.png");
	}

	@Override
	public void render () {
		Gdx.gl.glClearColor(0, 0, 0, 0);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		batch.begin();
		batch.draw(imgFundo, 0, 0);
		batch.draw(firstc.imageBoneco, champ.x, champ.y);
		if(Gdx.input.isKeyPressed(Keys.LEFT)) champ.x -= 200 * Gdx.graphics.getDeltaTime();
	    if(Gdx.input.isKeyPressed(Keys.RIGHT)) champ.x += 200 * Gdx.graphics.getDeltaTime();
	    if(Gdx.input.isKeyPressed(Keys.UP)) {
	    	champ.y += 200 * Gdx.graphics.getDeltaTime();
	    	
	    }
		desenhaMapa();
		batch.end();
	}
	
	@Override
	public void dispose () {
		batch.dispose();
		img.dispose();
			for(int i = 0; i < 103; i++){
				solo[i].bioma.dispose();
			}
		imgFundo.dispose();
	}
}
